// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗  
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝  
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//  
// This file is automatically generated 
// Please do not edit these files manually
// Run the following in the root of the repos:
//
// 		*NIX 		:	./build.sh codegen
// 		Windows 	:	build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;
using Elasticsearch.Net.Utf8Json;
using Elasticsearch.Net.Specification.DataFrameApi;

// ReSharper disable RedundantBaseConstructorCall
// ReSharper disable UnusedTypeParameter
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
namespace Nest
{
	///<summary>Descriptor for DeleteTransform <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-transform.html</para></summary>
	public partial class DeleteDataFrameTransformDescriptor : RequestDescriptorBase<DeleteDataFrameTransformDescriptor, DeleteDataFrameTransformRequestParameters, IDeleteDataFrameTransformRequest>, IDeleteDataFrameTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFrameDeleteTransform;
		///<summary>/_data_frame/transforms/{transform_id}</summary>
		///<param name = "transformId">this parameter is required</param>
		public DeleteDataFrameTransformDescriptor(string_ transformId): base(r => r.Required("transform_id", transformId))
		{
		}

		///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
		[SerializationConstructor]
		protected DeleteDataFrameTransformDescriptor(): base()
		{
		}

		// values part of the url path
		string_ IDeleteDataFrameTransformRequest.TransformId => Self.RouteValues.Get<string_>("transform_id");
		// Request parameters
		///<summary>When `true`, the transform is deleted regardless of its current state. The default value is `false`, meaning that the transform must be `stopped` before it can be deleted.</summary>
		public DeleteDataFrameTransformDescriptor Force(bool? force = true) => Qs("force", force);
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement DeleteDataFrameTransformDescriptor and DeleteDataFrameTransformRequest in a file called DeleteDataFrameTransformRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}

	///<summary>Descriptor for GetTransform <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform.html</para></summary>
	public partial class GetDataFrameTransformDescriptor : RequestDescriptorBase<GetDataFrameTransformDescriptor, GetDataFrameTransformRequestParameters, IGetDataFrameTransformRequest>, IGetDataFrameTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFrameGetTransform;
		///<summary>/_data_frame/transforms/{transform_id}</summary>
		///<param name = "transformId">Optional, accepts null</param>
		public GetDataFrameTransformDescriptor(string_ transformId): base(r => r.Optional("transform_id", transformId))
		{
		}

		///<summary>/_data_frame/transforms</summary>
		public GetDataFrameTransformDescriptor(): base()
		{
		}

		// values part of the url path
		string_ IGetDataFrameTransformRequest.TransformId => Self.RouteValues.Get<string_>("transform_id");
		///<summary>The id or comma delimited list of id expressions of the transforms to get, '_all' or '*' implies get all transforms</summary>
		public GetDataFrameTransformDescriptor TransformId(string_ transformId) => Assign(transformId, (a, v) => a.RouteValues.Optional("transform_id", v));
		// Request parameters
		///<summary>Whether to ignore if a wildcard expression matches no data frame transforms. (This includes `_all` string or when no data frame transforms have been specified)</summary>
		public GetDataFrameTransformDescriptor AllowNoMatch(bool? allownomatch = true) => Qs("allow_no_match", allownomatch);
		///<summary>skips a number of transform configs, defaults to 0</summary>
		public GetDataFrameTransformDescriptor From(int? from) => Qs("from", from);
		///<summary>specifies a max number of transforms to get, defaults to 100</summary>
		public GetDataFrameTransformDescriptor Size(int? size) => Qs("size", size);
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement GetDataFrameTransformDescriptor and GetDataFrameTransformRequest in a file called GetDataFrameTransformRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}

	///<summary>Descriptor for GetTransformStats <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform-stats.html</para></summary>
	public partial class GetDataFrameTransformStatsDescriptor : RequestDescriptorBase<GetDataFrameTransformStatsDescriptor, GetDataFrameTransformStatsRequestParameters, IGetDataFrameTransformStatsRequest>, IGetDataFrameTransformStatsRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFrameGetTransformStats;
		///<summary>/_data_frame/transforms/{transform_id}/_stats</summary>
		///<param name = "transformId">this parameter is required</param>
		public GetDataFrameTransformStatsDescriptor(string_ transformId): base(r => r.Required("transform_id", transformId))
		{
		}

		///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
		[SerializationConstructor]
		protected GetDataFrameTransformStatsDescriptor(): base()
		{
		}

		// values part of the url path
		string_ IGetDataFrameTransformStatsRequest.TransformId => Self.RouteValues.Get<string_>("transform_id");
		// Request parameters
		///<summary>Whether to ignore if a wildcard expression matches no data frame transforms. (This includes `_all` string or when no data frame transforms have been specified)</summary>
		public GetDataFrameTransformStatsDescriptor AllowNoMatch(bool? allownomatch = true) => Qs("allow_no_match", allownomatch);
		///<summary>skips a number of transform stats, defaults to 0</summary>
		public GetDataFrameTransformStatsDescriptor From(long? from) => Qs("from", from);
		///<summary>specifies a max number of transform stats to get, defaults to 100</summary>
		public GetDataFrameTransformStatsDescriptor Size(long? size) => Qs("size", size);
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement GetDataFrameTransformStatsDescriptor and GetDataFrameTransformStatsRequest in a file called GetDataFrameTransformStatsRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}

	///<summary>Descriptor for PreviewTransform <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/preview-transform.html</para></summary>
	public partial class PreviewDataFrameTransformDescriptor : RequestDescriptorBase<PreviewDataFrameTransformDescriptor, PreviewDataFrameTransformRequestParameters, IPreviewDataFrameTransformRequest>, IPreviewDataFrameTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFramePreviewTransform;
		// values part of the url path
		// Request parameters
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement PreviewDataFrameTransformDescriptor and PreviewDataFrameTransformRequest in a file called PreviewDataFrameTransformRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}

	///<summary>Descriptor for PutTransform <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/put-transform.html</para></summary>
	public partial class PutDataFrameTransformDescriptor : RequestDescriptorBase<PutDataFrameTransformDescriptor, PutDataFrameTransformRequestParameters, IPutDataFrameTransformRequest>, IPutDataFrameTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFramePutTransform;
		///<summary>/_data_frame/transforms/{transform_id}</summary>
		///<param name = "transformId">this parameter is required</param>
		public PutDataFrameTransformDescriptor(string_ transformId): base(r => r.Required("transform_id", transformId))
		{
		}

		///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
		[SerializationConstructor]
		protected PutDataFrameTransformDescriptor(): base()
		{
		}

		// values part of the url path
		string_ IPutDataFrameTransformRequest.TransformId => Self.RouteValues.Get<string_>("transform_id");
		// Request parameters
		///<summary>If validations should be deferred until data frame transform starts, defaults to false.</summary>
		public PutDataFrameTransformDescriptor DeferValidation(bool? defervalidation = true) => Qs("defer_validation", defervalidation);
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement PutDataFrameTransformDescriptor and PutDataFrameTransformRequest in a file called PutDataFrameTransformRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}

	///<summary>Descriptor for StartTransform <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/start-transform.html</para></summary>
	public partial class StartDataFrameTransformDescriptor : RequestDescriptorBase<StartDataFrameTransformDescriptor, StartDataFrameTransformRequestParameters, IStartDataFrameTransformRequest>, IStartDataFrameTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFrameStartTransform;
		///<summary>/_data_frame/transforms/{transform_id}/_start</summary>
		///<param name = "transformId">this parameter is required</param>
		public StartDataFrameTransformDescriptor(string_ transformId): base(r => r.Required("transform_id", transformId))
		{
		}

		///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
		[SerializationConstructor]
		protected StartDataFrameTransformDescriptor(): base()
		{
		}

		// values part of the url path
		string_ IStartDataFrameTransformRequest.TransformId => Self.RouteValues.Get<string_>("transform_id");
		// Request parameters
		///<summary>Controls the time to wait for the transform to start</summary>
		public StartDataFrameTransformDescriptor Timeout(Time timeout) => Qs("timeout", timeout);
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement StartDataFrameTransformDescriptor and StartDataFrameTransformRequest in a file called StartDataFrameTransformRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}

	///<summary>Descriptor for StopTransform <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/stop-transform.html</para></summary>
	public partial class StopDataFrameTransformDescriptor : RequestDescriptorBase<StopDataFrameTransformDescriptor, StopDataFrameTransformRequestParameters, IStopDataFrameTransformRequest>, IStopDataFrameTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFrameStopTransform;
		///<summary>/_data_frame/transforms/{transform_id}/_stop</summary>
		///<param name = "transformId">this parameter is required</param>
		public StopDataFrameTransformDescriptor(string_ transformId): base(r => r.Required("transform_id", transformId))
		{
		}

		///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
		[SerializationConstructor]
		protected StopDataFrameTransformDescriptor(): base()
		{
		}

		// values part of the url path
		string_ IStopDataFrameTransformRequest.TransformId => Self.RouteValues.Get<string_>("transform_id");
		// Request parameters
		///<summary>Whether to ignore if a wildcard expression matches no data frame transforms. (This includes `_all` string or when no data frame transforms have been specified)</summary>
		public StopDataFrameTransformDescriptor AllowNoMatch(bool? allownomatch = true) => Qs("allow_no_match", allownomatch);
		///<summary>Controls the time to wait until the transform has stopped. Default to 30 seconds</summary>
		public StopDataFrameTransformDescriptor Timeout(Time timeout) => Qs("timeout", timeout);
		///<summary>Whether to wait for the transform to fully stop before returning or not. Default to false</summary>
		public StopDataFrameTransformDescriptor WaitForCompletion(bool? waitforcompletion = true) => Qs("wait_for_completion", waitforcompletion);
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement StopDataFrameTransformDescriptor and StopDataFrameTransformRequest in a file called StopDataFrameTransformRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}

	///<summary>Descriptor for UpdateTransform <para>https://www.elastic.co/guide/en/elasticsearch/reference/current/update-transform.html</para></summary>
	public partial class UpdateDataFrameTransformDescriptor : RequestDescriptorBase<UpdateDataFrameTransformDescriptor, UpdateDataFrameTransformRequestParameters, IUpdateDataFrameTransformRequest>, IUpdateDataFrameTransformRequest
	{
		internal override ApiUrls ApiUrls => ApiUrlsLookups.DataFrameUpdateTransform;
		///<summary>/_data_frame/transforms/{transform_id}/_update</summary>
		///<param name = "transformId">this parameter is required</param>
		public UpdateDataFrameTransformDescriptor(string_ transformId): base(r => r.Required("transform_id", transformId))
		{
		}

		///<summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
		[SerializationConstructor]
		protected UpdateDataFrameTransformDescriptor(): base()
		{
		}

		// values part of the url path
		string_ IUpdateDataFrameTransformRequest.TransformId => Self.RouteValues.Get<string_>("transform_id");
		// Request parameters
		///<summary>If validations should be deferred until data frame transform starts, defaults to false.</summary>
		public UpdateDataFrameTransformDescriptor DeferValidation(bool? defervalidation = true) => Qs("defer_validation", defervalidation);
		[Obsolete("Unmapped, blacklist this API in CodeConfiguration.cs or implement UpdateDataFrameTransformDescriptor and UpdateDataFrameTransformRequest in a file called UpdateDataFrameTransformRequest.cs in NEST's codebase", true)]
		public bool IsUnmapped => true;
		public bool UseIsUnmapped => IsUnmapped;
	}
}